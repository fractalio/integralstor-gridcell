%include /tmp/part-include

# platform=x86, AMD64, or Intel EM64T
# version=1.0

# Firewall configuration
firewall --disabled

# Install OS instead of upgrade
install
unsupported_hardware

# Use network installation
url --url="http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/iso"
repo --name=extrasRepo --baseurl=http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/rpms_zfs-5.8_glust-3.7.16

# Root password
rootpw --iscrypted $1$NdB3lmS6$oXH5W2QCg4d6syxgE1GTA0 

# System authorization information
auth  --useshadow  --passalgo=sha512

# Use text mode install
text

# System keyboard
keyboard us

# System language
lang en_US

# SELinux configuration
selinux --disabled

# Do not configure the X Window System
skipx

# Installation logging level
logging --level=info

# Reboot after installation
reboot --eject

# System timezone
timezone  Asia/Kolkata

# Post installation section. You can specify any commands you want executed once
# installation has finished in this section. In this example, the system is
# updated and the output is logged to the post_install.log file.
# Keep in mind that any commands that execute in the post installation section are
# chrooted by default.

%pre
#!/usr/bin/bash

DIR="/sys/block"
MAXBOOTSIZE=800
MINBOOTSIZE=1
PATH="/dev"

### Running a for loop on Disks available among one will be selected by user/admin for OS to Install ###

clear >/dev/tty1
echo >/dev/tty1

#echo "HDD Details:" >/dev/tty1
#$(lsblk -ido NAME,TYPE,SIZE,MODEL) >temp
#echo $temp >/dev/tty1

echo -n "Please enter hardware vendor :" >/dev/tty1
read vend

if [[ -n "$vend" ]]; then
  echo { \"platform\": \"gridcell\", > /tmp/platform
  echo \"hardware_vendor\" : \"$vend\" } >> /tmp/platform
  echo -n "Entered vendor is: $vend" >/dev/tty1
  echo >/dev/tty1
else
  echo { \"platform\": \"gridcell\" } > /tmp/platform
  echo -n "platform is 'gridcell'" > /dev/tty1
fi

echo -n "Available disks and their size: " >/dev/tty1
for DEV in sd{a..z} ; do
  if [ -b "/dev/$DEV" ] ; then
    #Command to get size of the hard disk
    SIZE=`/usr/bin/cat $DIR/$DEV/size`
    GB=$(($SIZE/2**21))
    echo >/dev/tty1
    echo -n "Disk : " $DEV " : Size : " $GB "GB" >/dev/tty1
  fi
done

echo >/dev/tty1
echo >/dev/tty1

echo -n "Preferred disks to install Operating System and their size: " >/dev/tty1
for DEV in sd{a..z} ; do
  if [ -b "/dev/$DEV" ] ; then
    #Command to get size of the hard disk
    SIZE=`/usr/bin/cat $DIR/$DEV/size`
    GB=$(($SIZE/2**21))
    if [ "$GB" -le "$MAXBOOTSIZE" ]
        then
            if [ "$GB" -ge "$MINBOOTSIZE" ]
                then
                device=$DEV
                echo >/dev/tty1
                echo -n "Disk : "$device" : Size : "$GB "GB" >/dev/tty1
            fi
    fi
    #echo -n "Disk : " $DEV " - : Size : " $GB "GB" >/dev/tty1
  fi
done
echo >/dev/tty1
echo >/dev/tty1
echo -n "(NOTE: Please make sure that you have inserted two disks of same size to mirror the OS (To exit Press Ctrl+Alt+Del)) " >/dev/tty1
echo >/dev/tty1
echo >/dev/tty1
echo -n "Do you want to mirror the operating system drive? (y/n) : " >/dev/tty1
read input

    if [[ $input == "y" || $input == "Y" || $input == "yes" || $input == "Yes" || $input == "YES" ]] ; then

        echo -n "Please select the first mirrored OS drive (eg. sda) : " >/dev/tty1
        read bootdevice1
        echo -n "Please select the second mirrored OS drive (eg. sdb) : " >/dev/tty1
        read bootdevice2
            size1=`/usr/bin/cat $DIR/$bootdevice1/size`
            #echo -n "size of $bootdevice1 : $size1 " >/dev/tty1
            size2=`/usr/bin/cat $DIR/$bootdevice2/size`
            #echo -n "size of $bootdevice2 : $size2 " >/dev/tty1
              if [[ "$size1" == "$size2" ]] ; then

                echo -n "Please select the swap size in MBs... [Eg. 16384(for 8GB) OR 32768(for 16GB)] : " >/dev/tty1
                read swsize1
                echo >/dev/tty1
                echo "#partitioning scheme generated in %pre for 3 drives" > /tmp/part-include
                echo "bootloader --location=mbr --driveorder=$bootdevice1,$bootdevice2" >> /tmp/part-include
                echo "zerombr" >> /tmp/part-include
                echo -n "Select "YES" to clear prtitions of all disks(else it clears partition of selected BOOT disks) : " >/dev/tty1
                read partselect1

                if [[ $partselect1 == "y" || $partselect1 == "Y" || $partselect1 == "yes" || $partselect1 == "Yes" || $partselect1 == "YES" ]] ; then
                        echo "clearpart --all" >> /tmp/part-include
                else

                        echo "clearpart --drives=$bootdevice1,$bootdevice2 --all" >> /tmp/part-include
                fi
                echo "part raid.11    --size 1024     --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.12    --size $swsize1 --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.13    --size 10240    --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.14    --size 10240                    --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.15    --size 10240                    --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.16    --size 10240    --grow          --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.21    --size 1024     --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.22    --size $swsize1 --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.23    --size 10240    --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.24    --size 10240                    --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.25    --size 10240                    --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.26    --size 10240    --grow          --ondrive=$bootdevice2" >> /tmp/part-include

                # You can add --spares=x  
                echo "raid /boot      --fstype ext4   --device md0    --level=RAID1 raid.11 raid.21" >> /tmp/part-include
                echo "raid swap       --fstype swap   --device md1    --level=RAID1 raid.12 raid.22" >> /tmp/part-include
                echo "raid /home      --fstype ext4   --device md2    --level=RAID1 raid.13 raid.23" >> /tmp/part-include
                echo "raid /opt       --fstype ext4   --device md3    --level=RAID1 raid.14 raid.24" >> /tmp/part-include
                echo "raid /          --fstype ext4   --device md4    --level=RAID1 raid.15 raid.25" >> /tmp/part-include
                echo "raid /var/log   --fstype ext4   --device md5    --level=RAID1 raid.16 raid.26" >> /tmp/part-include

              else
                echo >/dev/tty1
                echo -n "Error occured!!! Exiting..." >/dev/tty1
                echo >/dev/tty1
              fi
    elif [[ $input == "n" || $input == "N" || $input == "no" || $input == "No" || $input == "NO" || $input == "" || $input == " " ]]; then

        echo -n "Please select the boot device (eg. sda) : " >/dev/tty1
        read bootdevice1
        echo -n "Please select the swap size in MBs... [Eg. 16384(for 8GB) OR 32768(for 16GB)] : " >/dev/tty1
        read swsize2
        echo >/dev/tty1
        echo "#partitioning scheme generated in %pre for 3 drives" > /tmp/part-include
        echo "bootloader --location=mbr" >> /tmp/part-include
        echo "zerombr" >> /tmp/part-include
        echo -n "Select "YES" to clear prtitions of all disks(else it will only clears partition of selected BOOT disk) : " >/dev/tty1
        read partselect2

        if [[ $partselect2 == "y" || $partselect2 == "Y" || $partselect2 == "yes" || $partselect2 == "Yes" || $partselect2 == "YES" ]] ; then
                echo "clearpart --all" >> /tmp/part-include
        else

                echo "clearpart --drives=$bootdevice1 --all" >> /tmp/part-include
        fi
                echo "part /boot --fstype ext4 --size 1024 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part swap --fstype swap --size $swsize2 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part /home --fstype ext4 --size 10240 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part /opt --fstype ext4 --size 10240 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part / --fstype ext4 --size 10240 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part /var/log --fstype ext4 --size 1 --grow --ondisk $bootdevice1" >> /tmp/part-include
      fi
    fi


#DIR="/sys/block"
#MAXBOOTSIZE=300
#PATH="/dev"

### Running a for loop on Disks available among one will be selected by user/admin for OS to Install ###
#clear >/dev/tty1
#echo >/dev/tty1

#for DEV in sd{a..z} ; do
#  if [ -b "/dev/$DEV" ] ; then
#    #Command to get size of the hard disk
#    SIZE=`/usr/bin/cat $DIR/$DEV/size`
#    GB=$(($SIZE/2**21))
#    #echo $GB $MAXBOOTSIZE
#    if [ $GB -lt $MAXBOOTSIZE ] ; then
#      device=$PATH/$DEV
#      #echo $GB $MAXBOOTSIZE $bootdevice
#      #break
#    fi
#    echo "Disk : " $DEV " - : Size : " $GB "GB" >/dev/tty1
#  fi
#done
#echo -n "Please select the boot device (eg. sda) : " >/dev/tty1
#read bootdevice

#### we now have device name of boot drive (sda/sdb/sdc, etc) ####

#echo "#partitioning scheme generated in %pre for 3 drives" > /tmp/part-include
#echo "bootloader --location=mbr" >> /tmp/part-include
#echo "zerombr" >> /tmp/part-include
##echo "clearpart --all" >> /tmp/part-include
#echo "clearpart --drives=$bootdevice --all" >> /tmp/part-include
#echo "part /boot --fstype ext4 --size 512 --ondisk $bootdevice" >> /tmp/part-include
#echo "part swap --fstype swap --size 16384 --ondisk $bootdevice" >> /tmp/part-include
#echo "part /home --fstype ext4 --size 10240 --ondisk $bootdevice" >> /tmp/part-include
#echo "part /opt --fstype ext4 --size 10240 --ondisk $bootdevice" >> /tmp/part-include
#echo "part / --fstype ext4 --size 1 --grow --ondisk $bootdevice" >> /tmp/part-include

%end

%packages 
@core
@Compatibility libraries
salt-master
salt-minion
sg3_utils
perl-Config-General
scsi-target-utils
tuned
wget
smartmontools
glusterfs
glusterfs-fuse
glusterfs-server
glusterfs-api
glusterfs-api-devel
ctdb
samba-client
samba
samba-winbind
samba-winbind-clients
ipmitool
OpenIPMI
kernel-devel
zfs
krb5-workstation
#bind
#ypbind
#ypserv
ntp
#uwsgi
nginx
kexec-tools
fractalio_django
python-devel
samba-vfs-glusterfs
iptraf
shellinabox

### custome package installation based on vendor selected by user.
#if grep "dell" /tmp/platform >/dev/null
#then
srvadmin-all
dell-system-update
#kmod-megaraid_sas
#fi

#if grep "marvell" /tmp/platform >/dev/null
#then
#kmod-mv94xx
#fi

%end

%post --nochroot --log=/mnt/sysimage/root/ks-post-nochroot.log
cp -rf /tmp/platform /mnt/sysimage/root
%end

%post --log=/root/ks-post-chroot.log

# Create the master and other required directories
mkdir -p /opt/integralstor
mkdir -p /run/samba
mkdir -p /var/log/integralstor/integralstor_gridcell
mkdir -p /opt/integralstor/integralstor_gridcell/tmp
mkdir -p /opt/integralstor/integralstor_gridcell/config
mkdir -p /tmp/logs
mkdir -p /etc/logrotate.d_old
touch /var/log/integralstor/integral_view.log

# Setup IntegralStor Common
cd /opt/integralstor
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/integralstor_common.tar.gz
/bin/tar xzf integralstor_common.tar.gz
ln -s /opt/integralstor/integralstor_common/site-packages/integralstor_common /usr/lib/python2.6/site-packages/integralstor_common
rm -f /opt/integralstor/integralstor_common.tar.gz


#Configure ZFS
rm -f /etc/modprobe.d/zfs.conf
ln -fs /opt/integralstor/integralstor_common/install/conf_files/zfs.conf /etc/modprobe.d
#sed -i 's/\$ZFS mount -a/\$ZFS mount -O -a/' /etc/init.d/zfs

#Turn on the common binaries
#chmod +x /opt/integralstor/integralstor_common/bin/fpctl

# Setup IntegralStor GRIDCell
cd /opt/integralstor
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/integralstor_gridcell.tar.gz
/bin/tar xzf integralstor_gridcell.tar.gz
ln -s /opt/integralstor/integralstor_gridcell/site-packages/integralstor_gridcell /usr/lib/python2.6/site-packages/integralstor_gridcell
yes | cp -rf /root/platform /opt/integralstor/integralstor_gridcell
ln -s /opt/integralstor/integralstor_gridcell/platform /opt/integralstor
rm -f /opt/integralstor/integralstor_gridcell.tar.gz

#Install the common salt module
mkdir -p /srv/salt/_modules
#cp /opt/integralstor/integralstor_common/salt/_modules/* /srv/salt/_modules
cp -f /opt/integralstor/integralstor_gridcell/salt/_modules/* /srv/salt/_modules/

#Link the GRIDCell specific conf files
rm -f /etc/resolv.conf
cp /opt/integralstor/integralstor_gridcell/install/conf_files/resolv.conf /etc/resolv.conf
rm -f /etc/init/start-ttys.conf
cp /opt/integralstor/integralstor_gridcell/install/conf_files/start-ttys.conf /etc/init/start-ttys.conf
#rm -f /etc/init/fractalmenu.conf
cp /opt/integralstor/integralstor_gridcell/install/conf_files/integralstor_gridcell_menu.conf /etc/init/integralstor_gridcell_menu.conf
rm -f /etc/nsswitch.conf
cp /opt/integralstor/integralstor_gridcell/install/conf_files/nsswitch.conf /etc/nsswitch.conf
cp -f /opt/integralstor/integralstor_gridcell/defaults/ntp/ntp.conf /etc
#cp -f /opt/integralstor/integralstor_gridcell/defaults/salt/minion /etc/salt/minion
cd /tmp
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/shellinaboxd
cp /tmp/shellinaboxd /etc/sysconfig
#ln -s /opt/integralstor/integralstor_unicell/config/shellinabox/shellinaboxd /etc/sysconfig

chmod 755 /opt/integralstor/integralstor_gridcell/scripts/python/*
chmod 755 /opt/integralstor/integralstor_gridcell/scripts/shell/*
#chmod 770 /var/named
chmod 755 /opt/integralstor/integralstor_gridcell/scripts/shell/*.sh
#Download and install the non-rpm based software..

cd /tmp
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/setuptools-11.3.1.tar.gz
/bin/tar xzf setuptools-11.3.1.tar.gz
cd setuptools-11.3.1
python setup.py install
rm -f setuptools-11.3.1.tar.gz

#cd /tmp
#/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/fractalio-iscsi.tar.gz
#/bin/tar xzf fractalio-iscsi.tar.gz
#cd fractalio-iscsi
#./configure
#make
#make install
#rm -f fractalio-iscsi.tar.gz

#cd /tmp
#/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/dnspython-1.12.0.tar.gz
#/bin/tar xzf dnspython-1.12.0.tar.gz
#cd dnspython-1.12.0
#python setup.py install
#rm -f dnspython-1.12.0.tar.gz

cd /tmp
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/libgfapi-python.tar.gz
tar xzf libgfapi-python.tar.gz
cd libgfapi-python
python setup.py install
rm -f libgfapi-python.tar.gz

cd /tmp
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/uwsgi-2.0.9.tar.gz
tar xzf uwsgi-2.0.9.tar.gz
cd uwsgi-2.0.9
python setup.py install
rm -f uwsgi-2.0.9.tar.gz

cd /tmp
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/netifaces-0.10.4.tar.gz
/bin/tar xzf netifaces-0.10.4.tar.gz
cd netifaces-0.10.4
python setup.py install
rm -f netifaces-0.10.4.tar.gz

cd /tmp
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/python-dateutil-2.4.2.tar.gz
tar xzf python-dateutil-2.4.2.tar.gz
cd python-dateutil-2.4.2
python setup.py install
rm -f python-dateutil-2.4.2.tar.gz

cd /tmp
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/python-crontab-1.9.3.tar.gz
tar xzf python-crontab-1.9.3.tar.gz
cd python-crontab-1.9.3
python setup.py install
rm -f python-crontab-1.9.3.tar.gz

#cd /tmp
#/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/sysstat-11.0.5.tar.xz
#/bin/tar xJf sysstat-11.0.5.tar.xz
#cd sysstat-11.0.5
#./configure --prefix=/usr
#make
#make install
#rm -f sysstat-11.0.5.tar.xz

cd /tmp
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/glusterfs-splitbrain-master.zip
unzip glusterfs-splitbrain-master.zip
cd glusterfs-splitbrain-master
python setup.py install 
rm -f glusterfs-splitbrain-master.zip

cd /tmp
/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/tar_installs/cron_descriptor-1.2.6.tar.gz
/bin/tar xzf cron_descriptor-1.2.6.tar.gz
cd cron_descriptor-1.2.6
python setup.py install
cd /tmp
rm -rf cron_descriptor-1.2.6*

#Turn on the appropriate services and load the appropriate kernel modules

#chkconfig ctdb on
chkconfig glusterd on
#chkconfig named on
#chkconfig nfs on		#disabling this service because gluster is also doing NFS service start on boot
#chkconfig winbind on
#chkconfig smb on
chkconfig tgtd on
chkconfig ntpd on
#chkconfig salt-master on
#chkconfig salt-minion on
modprobe ipmi_devintf

#Setup the rc.local
rm -rf /etc/rc.local
ln -s /opt/integralstor/integralstor_gridcell/defaults/rc_local/rc.local /etc
#echo "modprobe ipmi_devintf" >> /etc/rc.local
#echo "/sbin/modprobe zfs" >> /etc/rc.local
#echo "modprobe zfs" >> /etc/rc.local
#This creates the default frzpool ZFS pool
#echo "sh /opt/integralstor/integralstor_gridcell/install/scripts/create_default_zfs_pools.sh" >> /etc/rc.local
#echo "sh /opt/integralstor/integralstor_gridcell/scripts/shell/set_pool_quota.sh >>/tmp/out_pool_quota" >> /etc/rc.local
#echo "sh /opt/integralstor/integralstor_common/scripts/shell/cpu_core_dis.sh 4 >>/tmp/cpu_core_dis" >> /etc/rc.local
rm /etc/rc3.d/S99local
ln -s /etc/rc.local /etc/rc3.d/S99local
chmod 755 /etc/rc.local


#Configure salt
#service salt-minion stop 
#sed -i '/#master:/a master: gridcell-pri.integralstor.lan' /etc/salt/minion 
#yes | rm -f /etc/salt/pki/minion/minion_master.pub
#yes | rm -f /etc/salt/minion_id
#(echo "roles:" && echo "  - normal" && echo "  - gridcell") >> /etc/salt/grains
#touch /etc/salt/minion_id
#rm -f /var/run/salt-minion.pid
service salt-master stop
sed -i '/#file_roots:/a file_roots:\n\  \base:\n\    \- \/srv\/salt' /etc/salt/master
sed -i '/#file_recv: False/a file_recv: True' /etc/salt/master
chkconfig salt-master off
service salt-master start
chkconfig salt-minion off
service salt-minion start
# ###End of editing the /etc/salt/minion file. ###

#Configure nginx
sed -i 's/conf.d/sites-enabled/g' /etc/nginx/nginx.conf
mkdir /etc/nginx/sites-enabled
ln -s /opt/integralstor/integralstor_gridcell/integral_view/integral_view_nginx.conf /etc/nginx/sites-enabled/

#Configure uwsgi
mkdir -p /etc/uwsgi/vassals
ln -s /opt/integralstor/integralstor_gridcell/integral_view/integral_view_uwsgi.ini /etc/uwsgi/vassals/
#service uwsgi stop
#echo "/usr/bin/uwsgi --emperor /etc/uwsgi/vassals --uid root --gid root >/var/log/integralstor/integralstor_gridcell/integral_view.log 2>&1 &" >> /etc/rc.local
rm -rf /etc/init.d/uwsgi
ln -s /opt/integralstor/integralstor_common/scripts/init/uwsgi /etc/init.d/
#service uwsgi start

#Configure ramdisks
rm -f /etc/init.d/ramdisk
cp /opt/integralstor/integralstor_common/install/scripts/ramdisk /etc/init.d/ramdisk
chmod 755 /etc/init.d/ramdisk
touch /opt/integralstor/ramdisks.conf
chkconfig ramdisk on

#Log rotation 
cp -f /etc/logrotate.d/* /etc/logrotate.d_old/
cp -f /opt/integralstor/integralstor_gridcell/install/log_rotate_files/* /etc/logrotate.d/


#Configure crontab
(crontab -l 2>/dev/null; echo "SHELL=/bin/sh") | crontab -
(crontab -l 2>/dev/null; echo "PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin") | crontab -

#(crontab -l 2>/dev/null; echo "00 02 * * * /opt/integralstor/integralstor_gridcell/scripts/shell/config_backup.sh > /tmp/out_config_backup >> /tmp/err_config_backup") | crontab -
#(crontab -l 2>/dev/null; echo "* * * * * /bin/sh /opt/integralstor/integralstor_gridcell/scripts/shell/salt-service.sh > /tmp/out_salt >> /tmp/err_salt") | crontab -
##(crontab -l 2>/dev/null; echo "* * * * * /bin/sh /opt/integralstor/integralstor_gridcell/scripts/shell/salt-master.sh > /tmp/out_salt-master >> /tmp/err_salt-master") | crontab -
#(crontab -l 2>/dev/null; echo "* * * * * /usr/bin/python -c 'from integralstor_common import scheduler_utils; scheduler_utils.run_from_shell()' > /tmp/scheduler_alerts >> /tmp/scheduler_errors") | crontab -
##(crontab -l 2>/dev/null; echo "30 * * * * /opt/integralstor/integralstor_gridcell/scripts/shell/ntp_sync.sh > /tmp/out_ntp_sync >> /tmp/err_ntp_sync") | crontab -
#(crontab -l 2>/dev/null; echo "0 0 * * * /usr/bin/python -c 'from integralstor_common import logs; logs.auto_rotate_logs()' > /tmp/auto_rotate_logs_alerts >> /tmp/auto_rotate_errors") | crontab -
#(crontab -l 2>/dev/null; echo "0 5 * * * /usr/bin/python /opt/integralstor/integralstor_gridcell/scripts/python/zip_logs.py > /tmp/zip_logs_alerts >> /tmp/zip_logs_errors") | crontab -
#(crontab -l 2>/dev/null; echo "* * * * * /usr/bin/python /opt/integralstor/integralstor_gridcell/scripts/python/mount_admin_volume.py > /tmp/mount_admin_vol_out >> /tmp/mount_admin_vol_err") | crontab -

#(crontab -l 2>/dev/null; echo "* * * * * /usr/bin/python /opt/integralstor/integralstor_common/scripts/python/run_scheduler.py > /tmp/scheduler_output >> /tmp/scheduler_errors") | crontab -
#(crontab -l 2>/dev/null; echo " * * * * * /usr/bin/python /opt/integralstor/integralstor_common/scripts/python/generate_status.py > /tmp/status_output >> /tmp/status_errors") | crontab -
#(crontab -l 2>/dev/null; echo " * * * * * /usr/bin/python /opt/integralstor/integralstor_gridcell/scripts/python/poll_for_alerts.py > /tmp/gridcell_poll_for_alerts_output >> /tmp/gridcell_poll_for_alerts_errors") | crontab -
#(crontab -l 2>/dev/null; echo " * * * * * /usr/bin/python /opt/integralstor/integralstor_gridcell/scripts/python/batch_process.py > /tmp/batch_process_output >> /tmp/batch_process_errors") | crontab -
#(crontab -l 2>/dev/null; echo " * 5 * * * /usr/bin/python /opt/integralstor/integralstor_gridcell/scripts/python/log_backup.py backup_gridcell_logs > /tmp/gridcell_log_backup_output >> /tmp/gridcell_log_backup_errors") | crontab -
#(crontab -l 2>/dev/null; echo " * * * * * /usr/bin/python /opt/integralstor/integralstor_gridcell/scripts/python/config_backup.py backup_gridcell_config > /tmp/gridcell_config_backup_output >> /tmp/gridcell_config_backup_errors") | crontab -
#(crontab -l 2>/dev/null; echo " 0 0 * * * /usr/bin/python -c 'from integralstor_common import logs; logs.auto_rotate_logs()' > /tmp/auto_rotate_logs_alerts >> /tmp/auto_rotate_errors") | crontab -
#(crontab -l 2>/dev/null; echo " * * * * * /usr/bin/python /opt/integralstor/integralstor_gridcell/scripts/python/mount_admin_volume.py > /tmp/mount_admin_vol_out >> /tmp/mount_admin_vol_err") | crontab -



#Add users and groups
groupadd -g 500 integralstor
useradd  -g 500 integralstor
echo "integralstor123" | passwd --stdin integralstor
echo "integralstor    ALL=(ALL)    ALL" >> /etc/sudoers
sed -i "s/UID_MIN.*/UID_MIN                  1000/g" /etc/login.defs
sed -i "s/GID_MIN.*/UID_MIN                  1000/g" /etc/login.defs

#### Configure network interfaces ifcfg-* files #

ACTIVE_INTERFACES=`ifconfig | awk -vRS= -vFS="\n" '{ if ( $0 ~ /inet\ addr:/ ) { print }}' | sed 's/[ \t].*//;/^\(lo\|\)$/d'`
for IF in $ACTIVE_INTERFACES
do
echo "Configuring $IF to be static address" >> /root/post_install.log 2>&1
rm -f /etc/sysconfig/network-scripts/ifcfg-$IF
cat >> /etc/sysconfig/network-scripts/ifcfg-$IF <<EOF
DEVICE=$IF
HWADDR=`ifconfig $IF | grep HWaddr | awk '{print $5}'`
ONBOOT=yes
BOOTPROTO=static
IPADDR=`ifconfig $IF |awk 'BEGIN {FS = "[: ]+"} ; /inet addr/{print $4}'`
NETMASK=`ifconfig $IF |awk 'BEGIN {FS = "[: ]+"} ; /inet addr/{print $8}'`
EOF
GATEWAY_IP=`netstat -nr | awk '{ if ($4 ~/UG/) print; }' | awk -v CUR_IF=$IF '$NF==CUR_IF {print $2};'`
# The variable $GATEWAY_IP might be empty if all/some subgroup of interface(s) connect to the same network subnet or if some interface(s) has
# an unspecified/no gateway.
if [ ! -z "$GATEWAY_IP" ]
then
cat >> /etc/sysconfig/network-scripts/ifcfg-$IF <<EOF
GATEWAY=$GATEWAY_IP
EOF
fi
cat >> /etc/sysconfig/network-scripts/ifcfg-$IF <<EOF
TYPE=Ethernet
NM_CONTROLLED=no
USERCTL=no
PEERDNS=yes
IPV6INIT=no
EOF
done


#### Setting the Hostname by extracting the last two mac fields and setting it to "gridcell-xx.integralstor.lan" ###
#Extracting the last two mac fileds for hostname
STRING=$(ifconfig | grep eth0 | head -1 | awk '{print $5}' | awk -F ':' '{print tolower($5 $6)}')
hostname="gridcell-"$STRING".integralstor.lan"
echo "Hostname will be : " $hostname ; echo
echo "HOSTNAME=$hostname" > /etc/sysconfig/network
echo "NETWORKING=yes" >> /etc/sysconfig/network


# Editing /etc/hosts
#ip=$(ifconfig | awk -F':' '/inet addr/&&!/127.0.0.1/{split($2,_," ");print _[1]}')
#hnpart="gridcell-"$STRING
#echo "127.0.0.1 localhost $hnpart $hostname" > /etc/hosts
echo "127.0.0.1   localhost   localhost.localdomain   localhost4    localhost4.localdomain4" > /etc/hosts


# ###Performance Tuning  ###
/usr/bin/tuned-adm profile throughput-performance	
chkconfig tuned on		

## NIC Bonding of all eth ports ##
#/usr/bin/python /opt/integralstor/integralstor_gridcell/install/scripts/nic_bonding_tool.py -C 6 100 200 200

# ### Disabling the OPenGPGCheck and reloading the abrtd service ###
if [ -e "/etc/abrt/abrt-action-save-package-data.conf" ] ; then
  sed -i 's/OpenGPGCheck = yes/OpenGPGCheck = no/' /etc/abrt/abrt-action-save-package-data.conf 
else
  echo "No such file found : /etc/abrt/abrt-action-save-package-data.conf"
fi


# ### Reconfigure sshd  ###
/etc/init.d/sshd stop
sed '' /etc/ssh/sshd_config > /etc/ssh/original_sshd_config
sed '/#PermitRootLogin/a PermitRootLogin no' /etc/ssh/sshd_config > /etc/ssh/temp_file
echo 'AllowUsers integralstor' >> /etc/ssh/temp_file
rm -f /etc/ssh/sshd_config
mv /etc/ssh/temp_file /etc/ssh/sshd_config
/etc/init.d/sshd start


### copying kmod-mv94xx directory to systems kernel Directory(This is spesific to Marvel servers) ###
#cp -rf /lib/modules/2.6.32-431.el6.x86_64/extra/mv94xx /lib/modules/2.6.32-504.el6.x86_64/extra


# ###Editing the /etc/yum.repos.d/CentOS-Base.repo
# ..to disable base, updates and extras repositories. ###
cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/Original-CentOS-Base-repo
sed -i '/\[base\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo 
sed -i '/\[updates\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo 
sed -i '/\[extras\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo
sed -i '/\[centosplus\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo
sed -i '/\[contrib\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo


mv /var/lib/glusterd/hooks/1/start/post/S29CTDBsetup.sh /var/lib/glusterd/hooks/1/start/post/unused_S29CTDBsetup.sh
mv /var/lib/glusterd/hooks/1/start/post/S30samba-start.sh /var/lib/glusterd/hooks/1/start/post/unused_S30samba-start.sh
mv /var/lib/glusterd/hooks/1/stop/pre/S29CTDB-teardown.sh /var/lib/glusterd/hooks/1/stop/pre/unused_S29CTDB-teardown.sh
mv /var/lib/glusterd/hooks/1/stop/pre/S30samba-stop.sh /var/lib/glusterd/hooks/1/stop/pre/unused_S30samba-stop.sh
mv /var/lib/glusterd/hooks/1/set/post/S30samba-set.sh /var/lib/glusterd/hooks/1/set/post/unused_S30samba-set.sh

### Grub and other file modification to show title/name Integralstor Gridcell instead Centos 6.6 ###
#cd /boot/grub
#rm -f grub.conf
#/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/grub.conf
#cd /etc
#rm -f issue centos-release
#/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/issue
#/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/centos-release
#cd /usr/share/plymouth/themes/text
#rm -f text.plymouth
#/usr/bin/wget -c http://192.168.1.150/netboot/distros/centos/6.6/x86_64/integralstor_gridcell/v1.0/text.plymouth
#dracut -f


%end
