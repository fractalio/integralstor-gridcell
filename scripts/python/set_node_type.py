'''
if nodetype is primary :
  - Prompt for secondary IP (show default of 10.1.1.5)
  - Create DNS entries
  - Enable DNS on startup
  - Start DNS
  - Set grain
  - Restart salt minion
  - Enable salt-master on startup
  - Start salt-master
  - #Changes to rc.local will happen only on first time setup


if nodetype is secondary :

  - Prompt for primary IP (show default of 10.1.1.4)
  - Create DNS entries
  - Enable DNS on startup
  - Start DNS
  - Set grain
  - Restart salt minion
  - Enable salt-master on startup (only after testing salt failover) 
  - Start salt-master(only after testing salt failover)
  - #Changes to rc.local will happen only on first time setup
'''

import sys
import fractalio
from fractalio import command, networking

def set_as_primary(primary_ip, primary_netmask):

  print
  print "Setting GRIDCell type to primary"
  print
  print "The IntegralStor 'primary' GRIDCell's IP address is currently %s"%primary_ip
  str_to_print = "Please confirm that this is correct (y/n) :"
  valid_input = False
  ok = False
  while not valid_input :
    input = raw_input(str_to_print)
    if input:
      if input.lower() in ['y','n']:
        valid_input = True
        if input.lower() == 'y':
          ok = True

  if not ok:
    print
    print "Please set the IP configuration of this (primary) GRIDCell and then try again"
    return -1

  str_to_print = 'Please enter the IP address of the Fractalio "secondary" GRIDCell : '    
  valid_input = False
  while not valid_input :
    print
    input = raw_input(str_to_print)
    if input:
      if networking.is_ip(input):
        valid_input = True
        secondary_ip = input

  str_to_print = "Please enter the IP address of the customer's DNS server: "
  external_dns = None
  valid_input = False
  while not valid_input :
    print
    input = raw_input(str_to_print)
    if input:
      if networking.is_ip(input):
        valid_input = True
        external_dns = input
    else:
      valid_input = True

  print
  print "Generating the DNS configuartion.."
  rc = networking.generate_default_primary_named_conf(primary_ip, primary_netmask, secondary_ip)

  if rc != 0:
    print "Error generating the DNS configuration file"
    return -1
    
  rc = networking.set_name_servers([primary_ip, secondary_ip, external_dns])

  if rc != 0:
    print "Error generating the DNS resolve.conf file"
    return -1

  print "Generating the DNS configuartion.. Done."

  print
  print "Starting the DNS server .."
  r, rc = command.execute_with_rc('chkconfig named on')
  if rc != 0:
    print "Error setting the DNS server to start on boot"
    return -1

  r, rc = command.execute_with_rc('service named restart')
  if rc != 0:
    print "Error starting the DNS server"
    return -1

  print "Starting the DNS server .. Done."

  print
  print "Setting salt grains.."
  try :
    with open('/etc/salt/grains', 'w') as f:
      f.write('# Generated by the IntegralStor script\n')
      f.write('roles:\n')
      f.write('  - primary\n')
      f.write('  - master\n')
      f.flush()
    f.close()
  except Exception, e:
    print "Error generating the grains file : %s"%e
    return -1
  print "Setting salt grains.. Done."

  print
  print "Setting hostname.."
  rc = networking.set_hostname('fractalio-pri')
  if rc != 0:
    print "Error setting hostname"
    return -1
  print "Setting hostname.. Done."

  print
  print "Restarting salt master.."
  r, rc = command.execute_with_rc('service salt-master start')
  if rc != 0:
    print "Error starting the salt master"
    return -1
  print "Restarting salt master.. Done."

  print
  print "Restarting salt minion.."
  r, rc = command.execute_with_rc('service salt-minion restart')
  if rc != 0:
    print "Error restarting the salt minion"
    return -1
  print "Restarting salt minion.. Done."

  print
  print "Setting salt master to start on reboot.."
  r, rc = command.execute_with_rc('chkconfig salt-master on')
  if rc != 0:
    print "Error setting the salt master server to start on boot"
    return -1
  print "Setting salt master to start on reboot.. Done."


  print
  print "Successfully set the GRIDCell type to primary."
  return 0



def set_as_secondary(secondary_ip, secondary_netmask):

  print
  print "Setting GRIDCell type to secondary"
  print
  print "The IntegralStor 'secondary' GRIDCell's IP address is currently %s"%secondary_ip
  str_to_print = "Please confirm that this is correct (y/n) :"
  valid_input = False
  ok = False
  while not valid_input :
    input = raw_input(str_to_print)
    if input:
      if input.lower() in ['y','n']:
        valid_input = True
        if input.lower() == 'y':
          ok = True

  if not ok:
    print
    print "Please set the IP configuration of this (secondary) GRIDCell and then try again"
    return -1

  str_to_print = "Please enter the IP address of the Fractalio 'primary' GRIDCell : "    
  valid_input = False
  while not valid_input :
    input = raw_input(str_to_print)
    if input:
      if networking.is_ip(input):
        valid_input = True
        primary_ip = input

  str_to_print = "Please enter the IP address of the customer's DNS server: "
  external_dns = None
  valid_input = False
  while not valid_input :
    print
    input = raw_input(str_to_print)
    if input:
      if networking.is_ip(input):
        valid_input = True
        external_dns = input
    else:
      valid_input = True

  print
  print "Generating the DNS configuartion.."
  rc = networking.generate_default_secondary_named_conf(primary_ip, secondary_netmask, secondary_ip)

  if rc != 0:
    print "Error generating the DNS configuration file"
    return -1

  rc = networking.set_name_servers([primary_ip, secondary_ip, external_dns])

  if rc != 0:
    print "Error generating the DNS resolve.conf file"
    return -1
    
  print "Generating the DNS configuartion.. Done."

  print
  print "Starting the DNS server .."
  r, rc = command.execute_with_rc('chkconfig named on')
  if rc != 0:
    print "Error setting the DNS server to start on boot"
    return -1

  r, rc = command.execute_with_rc('service named restart')
  if rc != 0:
    print "Error starting the DNS server"
    return -1

  print "Starting the DNS server .. Done."

  print
  print "Setting salt grains.."
  try :
    with open('/etc/salt/grains', 'w') as f:
      f.write('# Generated by the IntegralStor script\n')
      f.write('roles:\n')
      f.write('  - secondary\n')
      f.write('  - master\n')
      f.flush()
    f.close()
  except Exception, e:
    print "Error generating the grains file : %s"%e
    return -1
  print "Setting salt grains.. Done."

  print
  print "Setting hostname.."
  rc = networking.set_hostname('fractalio-sec')
  if rc != 0:
    print "Error setting hostname"
    return -1
  print "Setting hostname.. Done."

  print
  print "Restarting salt services.."
  r, rc = command.execute_with_rc('service salt-minion restart')
  if rc != 0:
    print "Error restarting the salt minion"
    return -1
  print "Restarting salt services.. Done."

  print
  print "Successfully set the GRIDCell type to primary."

  '''
  THE FOLLOWING SHOULD BE DONE ONLY AFTER TESTING SALT FAILOVER AND MAKING APPROPRIATE CHANGES!

  r, rc = command.execute_with_rc('chkconfig salt-master on')
  if rc != 0:
    print "Error setting the salt master server to start on boot"
    return -1

  r, rc = command.execute_with_rc('service salt-master start')
  if rc != 0:
    print "Error starting the salt master"
    return -1
  print "Restarting salt services.. Done."
  '''

  print
  print "Successfully changed the GRIDCell type to secondary"
  return 0
  return 0

if __name__ == '__main__':

  if len(sys.argv) < 2 :
    print "Please specify the GRIDCell type"
    sys.exit(-1)
  node_type = sys.argv[1]

  if node_type not in ["primary", "secondary"]:
    print "Please specify a valid GRIDCell type"
    sys.exit(-1)

  ip_info = networking.get_ip_info('bond0')
  if not ip_info :
    print "No bonding configured! Incorrect configuration. Please configure networking or contact Fractalio Data"
    sys.exit(-1)

  ip = ip_info["ipaddr"]
  netmask = ip_info["netmask"]

  if node_type == 'primary':
    rc = set_as_primary(ip, netmask)
    sys.exit(rc)
  else:
    rc = set_as_secondary(ip, netmask)
    sys.exit(rc)

