"""Routines that create the batch files for operations that require a sequence of (gluster) actions. A cron script will periodically run to check if any files exist to be executed.

This exports:
  create_replace_command_file - Used to generate a batch file which when run will replace one node with another
  create_rebalance_command_file - Used to generate a batch file which when run will run and check on the rebalance of a volume

"""
import time, os, json, os.path, re, sys

from integralstor_gridcell import gluster_volumes 
from integralstor_common import common


def create_replace_command_file(si, vol_list, src_node, dest_node):
  """Create a batch file to replace a node with another node.

  si -- The system info dict that has all the information about the system.
  vol_list -- The list of volumes present on the source node for which gluster replace commands need to be generated.
  src_node -- The node being replaced.
  dest_node -- The replacement node.
  """

  d = None
  try:

    #Get the dir where the batch file needs to be generated.
    batch_dir, err = common.get_batch_files_path()
    if err:
      raise Exception(err)
    if not os.path.exists(batch_dir):
      os.mkdir(batch_dir)

    #This is the dict which will form the basis of the JSON that will be stored in the batch file.
    data = {}
    data["title"] = "Replacing GRIDCell %s with GRIDCell %s"%(src_node, dest_node)
    #Tells the cron script what action this represents
    data["process"] = "replace_node"
    data["volume_list"] = []
    data["command_list"] = []

    command_list = []

    if vol_list:
      for tv in vol_list:
        vd, err = volume_info.get_basic_volume_info(tv)
        if err:
          raise Exception(err)

        if vd and ('bricks' in vd and vd['bricks']):
          for brick_list in vd['bricks']:
            for brick in brick_list:

              brick_components, err = volume_info.get_components(brick)
              if err:
                raise Exception(err)
              if not brick_components:
                raise Exception("Error decoding the brick for the specified volume. Brick name : %s "%brick)

              if brick_components['host'] != src_node:
                continue
              brick_path = '/%s/%s/%s'%(brick_components['pool'], brick_components['dataset'], tv)
              if vd["type"] == "Distribute":
                d = {}
                #c = "/usr/sbin/gluster volume replace-brick %s %s:%s %s:%s"%(tv, src_node, brick_path, dest_node, brick_path)
                c = "/usr/sbin/gluster volume add-brick %s %s:%s force --xml"%(tv, dest_node, brick_path)
                d["type"] = "add_brick"
                d["desc"] = "Adding volume storage in GRIDCell %s for volume %s"%(dest_node, tv)
                d["command"] = c
                d["status_code"] = 0
                data["command_list"].append(d)
                d = {}
                c = "/usr/sbin/gluster --mode=script volume remove-brick %s %s:%s start --xml"%(tv, src_node, brick_path)
                d["type"] = "remove_brick_start"
                d["desc"] = "Migrating volume storage from GRIDCell %s for volume %s start"%(src_node, tv)
                d["command"] = c
                d["status_code"] = 0
                data["command_list"].append(d)
                d = {}
                c = "/usr/sbin/gluster volume remove-brick %s %s:%s status --xml"%(tv, src_node, brick_path)
                d["type"] = "remove_brick_status"
                d["desc"] = "Migrating volume storage from GRIDCell %s for volume %s status"%(src_node, tv)
                d["command"] = c
                d["status_code"] = 0
                data["command_list"].append(d)
                d = {}
                c = "/usr/sbin/gluster --mode=script volume remove-brick %s %s:%s commit --xml"%(tv, src_node, brick_path)
                d["type"] = "remove_brick_commit"
                d["desc"] = "Migrating volume storage from GRIDCell %s for volume %s commit"%(src_node, tv)
                d["command"] = c
                d["status_code"] = 0
                data["command_list"].append(d)
              else:
                #Replicated vol so for now do a replace-brick
                d = {}
                c = "/usr/sbin/gluster volume replace-brick %s %s:%s %s:%s commit force --xml"%(tv, src_node, brick_path, dest_node, brick_path)
                d["type"] = "replace_brick_commit"
                d["desc"] = "Replacing storage location for volume %s from GRIDCell %s to GRIDCell %s"%(tv, src_node, dest_node)
                d["command"] = c
                d["status_code"] = 0
                data["command_list"].append(d)
                d = {}
                c = "/usr/sbin/gluster volume heal %s full --xml"%tv
                d["type"] = "volume_heal_full"
                d["desc"] = "Migrating volume data from GRIDCell %s for volume %s start"%(src_node, tv)
                d["command"] = c
                d["status_code"] = 0
                data["command_list"].append(d)
                d = {}
                c = "/usr/sbin/gluster volume heal %s info --xml"%tv
                d["type"] = "volume_heal_info"
                d["desc"] = "Migrating volume data from GRIDCell %s for volume %s info"%(src_node, tv)
                d["command"] = c
                d["status_code"] = 0
                data["command_list"].append(d)
    
              if not tv in data["volume_list"]:
                data["volume_list"].append(tv)
  
      if not os.path.exists(batch_dir):
        os.mkdir(batch_dir)
  
      t = time.localtime()
      data["status"] = "Not yet started"
      data["initiate_time"] = time.strftime("%a %b %d %H:%M:%S %Y", t)
      file_name = "%s_%d"%(time.strftime("bp_replace_node_%b_%d_%Y_%H_%M_%S", t) , int(time.time()))
      full_file_name = "%s/%s"%(batch_dir, file_name)
      data["status_url"] = "/view_batch_process?file_name=%s"%file_name
      d = {}
      with open(full_file_name, "w+") as f:
        json.dump(data, f, indent=2)
      d["file_name"] = file_name
    else:
      raise Exception('No volumes found on the source GRIDCell')
  except Exception, e:
    return None, 'Error creating the replace command batch file : %s'%str(e)
  else:
    return d, None

def create_rebalance_command_file(vol_name):

  d = None
  try:
    batch_dir, err = common.get_batch_files_path()
    if err:
      raise Exception(err)
    if not os.path.exists(batch_dir):
      os.mkdir(batch_dir)

    t = time.localtime()
    data = {}
    data["initiate_time"] = time.strftime("%a %b %d %H:%M:%S %Y", t)
    file_name = "%s_%d"%(time.strftime("bp_volume_rebalance_%b_%d_%Y_%H_%M_%S", t) , int(time.time()))
    full_file_name = "%s/%s"%(batch_dir, file_name)
    data["status_url"] = "/view_batch_process?file_name=%s"%file_name
    data["title"] = "Volume rebalance for volume \'%s\'"%vol_name
    data["process"] = "volume_rebalance"
    data["status"] = "Not yet started"
    data["command_list"] = []
    d = {}
    d["type"] = "rebalance_start"
    d["desc"] = "Volume rebalance for volume %s - start"%vol_name
    d["command"] = "/usr/sbin/gluster volume rebalance %s start --xml"%vol_name
    d["status_code"] = 0
    data["command_list"].append(d)
    d = {}
    d["type"] = "rebalance_status"
    d["desc"] = "Volume rebalance for volume %s - status"%vol_name
    d["command"] = "/usr/sbin/gluster volume rebalance %s status --xml"%vol_name
    d["status_code"] = 0
    data["command_list"].append(d)
    with open(full_file_name, "w+") as f:
      json.dump(data, f, indent=2)
    d["file_name"] = file_name
  except Exception, e:
    None, 'Error creating the rebalance command batch file : %s'%str(e)
  else:
    return d, None


'''
def create_factory_defaults_reset_file(scl, vil):

  t = time.localtime()
  data = {}
  data["initiate_time"] = time.strftime("%a %b %d %H:%M:%S %Y", t)
  file_name = "%s_%d"%(time.strftime("bp_factory_defaults_reset_%b_%d_%Y_%H_%M_%S", t) , int(time.time()))
  full_file_name = "%s/%s"%(batch_dir, file_name)
  data["status_url"] = "/view_batch_process?file_name=%s"%file_name
  data["title"] = "Reset system to factory defaults"
  data["process"] = "factory_deafults_reset"
  data["status"] = "Not yet started"
  data["command_list"] = []

  for v in vil:
    if v["status"] == 1:
      #Stop this volume
      d = {}
      d["type"] = "vol_stop"
      d["desc"] = "Stopping volume %s "%v["name"]
      d["command"] = 'gluster volume stop %s force --xml'%v["name"]
      d["status_code"] = 0
      data["command_list"].append(d)
  for v in vil:
    d = {}
    d["type"] = "vol_delete"
    d["desc"] = "Deleting volume %s "%v["name"]
    d["command"] = 'gluster volume delete %s force --xml'%v["name"]
    d["status_code"] = 0
    data["command_list"].append(d)
    for brick in v["bricks"]:
      for ib in brick:
        h, b = ib.split(':')
        d = {}
        d["type"] = "brick_delete"
        d["desc"] = "Deleting brick %s on %s for volume %s "%(b, h, v["name"])
        d["command"] = '/opt/fractal/bin/client rcmd rm -rf %s'%b
        d["status_code"] = 0
        data["command_list"].append(d)

  # Remove all the volume directories..

  localhost = socket.gethostname().strip()
  for hostname, n in scl.items():
    if (hostname.strip() == localhost) or (not n["in_cluster"]):
      continue
    d = {}
    d["type"] = "peer_detach"
    d["desc"] = "Removing %s from the storage pool"%hostname
    d["command"] = 'gluster peer detach %s --xml'%hostname
    d["status_code"] = 0
    data["command_list"].append(d)

  if not os.path.exists(batch_dir):
    try:
      os.mkdir(batch_dir)
    except OSError:
      return None

  try :
    with open(full_file_name, "w+") as f:
      json.dump(data, f, indent=2)
  except Exception, e:
    d["error"] = str(e)
  else:
    d["file_name"] = file_name
  return d
'''
