
import salt.client

#Global Declaration of services so as to reused everywhere else
default_services = {'Gluster':'glusterd','CIFS-CTDB':'ctdb','CIFS-Smb':'smb','CIFS-Winbind':'winbind','NTP':'ntpd','NFS':'rpcbind'}

"""
this function performs a action on a service. 
Requirements :
  1. node : Either * or an individual node name. As per salt key names. It also accepts a list of node names as per saltstack definations
  2. service : accepts a service name defined in the default_services variable. Any function calling this, should import the default_services dict and pass the actual service name or just pass the service name of the service to be performed an action.
  3. action : status,restart,start,stop,reload. Accepts all these

"""
def service_action(node,service,action):
  if not service or not action:
    return False,"Service name or action incorrect"
  try:
    action = 'service.'+action
    client = salt.client.LocalClient()
    status = client.cmd(node,action,[service])
    if not status:
      return False,"Unknown Error"
    return status,None
  except Exception,e:
    return False,e

"""
This code calls the service_action to get the status of all the services on all the nodes defined in the default_services.
"""
def get_service_status(services=default_services):
  try:
    service_status = {}
    client = salt.client.LocalClient()
    for name,service in services.items():
       status,err = service_action('*',service,'status')
       if err:
         return False,"Unable to get status of %s(%s)"%(name,service)
       service_status[name] = status
    return service_status,None
  except Exception,e:
    return False,e


#print get_service_status()    
#print service_action('*','ntpd','status')
