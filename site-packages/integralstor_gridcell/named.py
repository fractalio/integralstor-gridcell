"""Routines that generated the named DNS configuration files for the primary and secondary

This exports:
  generate_default_primary_named_conf - Generates the named.conf to be used in the primary
  generate_default_secondary_named_conf - Generates the named.conf to be used in the secondary
  generate_default_zone_file - Generates the defauly named zone file

"""
from integralstor_common import networking, command


def generate_default_primary_named_conf(primary_ip, primary_netmask, secondary_ip, generate_forwarders=False, forwarder_ip=None, generate_zone_file=True):
    """Generates the named.conf to be used in the primary

    primary_ip -- The IP address of the primary
    primary_netmask -- The netmask of the primary
    secondary_ip -- The IP address of the secondary
    generate_forwarders -- If True then generate a forwarders entry to <forwarder_ip>
    forwarder_ip -- The forwarder IP address if a forwarder entry is needed
    generate_zone_file -- If True then generate a zone file with the primary and secondary IP addresses
    """
    rc = 0
    try:
        primary_cidr_netmask, err = networking.get_subnet_in_cidr_format(
            primary_ip, primary_netmask)
        if err:
            raise Exception(err)

        with open('/etc/named.conf', 'w') as f:
            f.write('// Generated by the IntegralStor script\n')
            f.write("options {\n")
            f.write(" listen-on port 53 { any; };\n")
            f.write(" listen-on-v6 port 53 { ::1; };\n")
            f.write(' directory 	"/var/named";\n')
            f.write(' dump-file 	"/var/named/data/cache_dump.db";\n')
            f.write(' statistics-file "/var/named/data/named_stats.txt";\n')
            f.write(' memstatistics-file "/var/named/data/named_mem_stats.txt";\n')
            f.write(" allow-query     { localhost; any; };\n")
            f.write(" allow-transfer  { localhost; %s; };\n" % secondary_ip)
            if generate_forwarders:
                f.write(" forwarders    { %s; };\n" % forwarder_ip)
                f.write(" recursion yes;\n")
            else:
                f.write(" recursion no;\n")
            f.write("};\n")

            f.write("logging {\n")
            f.write(" channel default_debug {\n")
            f.write('   file "data/named.run";\n')
            f.write("   severity dynamic;\n")
            f.write(" };\n")
            f.write("};\n")

            f.write('zone "." IN {\n')
            f.write(" type hint;\n")
            f.write(' file "named.ca";\n')
            f.write("};\n")

            f.write('zone "integralstor.lan" IN {\n')
            f.write(" type master;\n")
            f.write(' file "integralstor.for";\n')
            f.write(" allow-update { localhost; %s; };\n" %
                    primary_cidr_netmask)
            f.write("};\n")

            f.write('include "/etc/named.rfc1912.zones";\n')
            f.flush()
        f.close()
        if generate_zone_file:
            rc, err = generate_default_zone_file(primary_ip, secondary_ip)
            if err:
                raise Exception(err)
            if rc != 0:
                raise Exception('Error generating the default zone file')
        (r, rc), err = command.execute_with_rc('service named reload')
        if err:
            raise Exception(err)
        if rc != 0:
            print "Error restarting the DNS server"
    except Exception, e:
        return False, 'Error generating primary named configuration : %s' % str(e)
    else:
        return True, None


def generate_default_zone_file(primary_ip, secondary_ip):
    """Generates the default zone file with the primary and secondary IPs

    primary_ip -- The IP address of the primary
    secondary_ip -- The IP address of the secondary
    """
    try:
        with open('/var/named/integralstor.for', 'w') as f1:
            f1.write('$ORIGIN .\n')
            f1.write('$TTL 86400    ; 1 day\n')
            f1.write(
                'integralstor.lan        IN SOA    gridcell-pri.integralstor.lan. root.integralstor.lan. (\n')
            f1.write('                                2011071026 ; serial\n')
            f1.write(
                '                                3600       ; refresh (1 hour)\n')
            f1.write(
                '                                1800       ; retry (30 minutes)\n')
            f1.write(
                '                                604800     ; expire (1 week)\n')
            f1.write(
                '                                86400      ; minimum (1 day)\n')
            f1.write('                )\n')
            f1.write('            NS    gridcell-pri.integralstor.lan.\n')
            f1.write('            NS    gridcell-sec.integralstor.lan.\n')
            f1.write('            PTR    integralstor.lan.\n')
            f1.write('$ORIGIN integralstor.lan.\n')
            f1.write('gridcell-pri          A    %s\n' % primary_ip)
            f1.write('gridcell-sec        A    %s\n' % secondary_ip)
            f1.flush()
        f1.close()
    except Exception, e:
        return False, "Error generating zone file : %s" % str(e)
    else:
        return True, None


def generate_default_secondary_named_conf(primary_ip, secondary_netmask, secondary_ip, generate_forwarders=False, forwarder_ip=None):
    """Generates the named.conf to be used in the secondary

    primary_ip -- The IP address of the primary
    secondary_ip -- The IP address of the secondary
    secondary_netmask -- The netmask of the primary
    generate_forwarders -- If True then generate a forwarders entry to <forwarder_ip>
    forwarder_ip -- The forwarder IP address if a forwarder entry is needed
    """
    rc = 0
    try:
        secondary_cidr_netmask, err = get_subnet_in_cidr_format(
            primary_ip, secondary_netmask)
        if err:
            raise Exception(err)

        with open('/etc/named.conf', 'w') as f:
            f.write('// Generated by the IntegralStor script\n')
            f.write('options {\n')
            f.write('  listen-on port 53 { any; };\n')
            f.write('  listen-on-v6 port 53 { ::1; };\n')
            f.write('  directory 	"/var/named";\n')
            f.write('  dump-file 	"/var/named/data/cache_dump.db";\n')
            f.write('  statistics-file "/var/named/data/named_stats.txt";\n')
            f.write('  memstatistics-file "/var/named/data/named_mem_stats.txt";\n')
            f.write(
                '  allow-query     { localhost; %s; };\n' % secondary_cidr_netmask)
            if generate_forwarders:
                f.write("   forwarders    { %s; };\n" % forwarder_ip)
                f.write('  recursion yes;\n')
            else:
                f.write('  recursion no;\n')
            f.write('};\n')

            f.write('logging {\n')
            f.write('  channel default_debug {\n')
            f.write('    file "data/named.run";\n')
            f.write('    severity dynamic;\n')
            f.write('  };\n')
            f.write('};\n')

            f.write('zone "." IN {\n')
            f.write('  type hint;\n')
            f.write('  file "named.ca";\n')
            f.write('};\n')

            f.write('zone "integralstor.lan" IN {\n')
            f.write('  type slave;\n')
            f.write('  file "slaves/integralstor.for";\n')
            f.write('  masters { %s; };\n' % primary_ip)
            f.write('};\n')
            f.write('include "/etc/named.rfc1912.zones";\n')
            f.flush()
        f.close()
        (r, rc), err = command.execute_with_rc('service named restart')
        if err:
            raise Exception(err)
        if rc != 0:
            print "Error restarting the DNS server"
    except Exception, e:
        return False,  "Error generating the DNS slave configuration file : %s" % e
    else:
        return True, None

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
