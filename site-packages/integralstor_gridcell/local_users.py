"""Routines that generate, retrieve and modify local user accounts while maintaining them in samba as well

This exports:
  create_local_user - Creates a local user account
  delete_local_user - Deletes a local user account
  change_passwd - Changes the password for a local user account
  get_local_users - Get all the info of all the local user accounts

"""

import salt.client
import sys
import os
import pwd
import crypt

from integralstor_common import command


def create_local_user(userid, name, pswd):
    """Create a local user account in the linux system as well as in samba. This account cannot be used to ssh/login as the system pswd is not whats provided.

    userid -- The username of the account
    name -- The real world name associated with the account
    pswd -- The password for the username
    """

    try:
        error_list = []

        # First check if samba user exists. if so kick out
        ul, err = get_local_users()
        if err:
            raise Exception(err)
        if ul:
            for ud in ul:
                if ud["userid"] == userid:
                    raise Exception(
                        "The user \"%s\" already exists. " % userid)

        # Now check if system user exists. If not create..
        create_system_user = False
        try:
            pwd.getpwnam(userid)
        except KeyError:
            create_system_user = True

        if create_system_user:
            # Set a standard system password - not the one given by the user as
            # the user should not have access to the system
            enc_pswd = crypt.crypt("integralstor_pswd_%s" % userid, "28")

            client = salt.client.LocalClient()
            rc = client.cmd('*', 'user.add', [userid, None, 1000])

            for hostname, status in rc.items():
                if not status:
                    error_list.append(
                        "Error creating the userid on GRIDCell %s" % hostname)
            if error_list:
                raise Exception(','.join(error_list))

            rc = client.cmd('*', 'shadow.set_password', [userid, enc_pswd])
            for hostname, status in rc.items():
                if not status:
                    error_list.append(
                        "Error setting the password for userid on GRIDCell %s" % hostname)
            if error_list:
                raise Exception(','.join(error_list))

            rc = client.cmd('*', 'user.chfullname',
                            [userid, "integralstor_user_%s" % name])
            for hostname, status in rc.items():
                if not status:
                    error_list.append(
                        "Error setting the name for userid on GRIDCell %s" % hostname)

        # Now all set to create samba user
        (ret, rc), err = command.execute_with_conf_and_rc(
            r'/usr/bin/pdbedit  -d 1 -t -a  -u %s -f %s' % (userid, name), "%s\n%s" % (pswd, pswd))
        if rc == 0:
            lines, er = command.get_output_list(ret)
            if er:
                raise Exception(er)
        else:
            err = ''
            tl, er = command.get_output_list(ret)
            if er:
                raise Exception(er)
            if tl:
                err = ','.join(tl)
            tl, er = command.get_error_list(ret)
            if er:
                raise Exception(er)
            if tl:
                err = err + ','.join(tl)
            raise Exception(err)
    except Exception, e:
        return False, 'Error creating local user :%s' % str(e)
    else:
        return True, None


def delete_local_user(userid):
    """Deletes a local user account in the linux system as well as in samba. 

    userid -- The username of the account
    """

    try:
        error_list = []
        # First check if samba user exists. if so kick out
        ul, err = get_local_users()
        if err:
            raise Exception(err)
        found = False
        if ul:
            for ud in ul:
                if ud["userid"] == userid:
                    found = True
        if not found:
            raise Exception("The user \"%s\" does not exist. " % userid)

        # Now check if system user exists. If so and is created by integralstor
        # then delete..
        delete_system_user = False
        try:
            d = pwd.getpwnam(userid)
            name = d[4]
            if name.find("integralstor_user") == 0:
                delete_system_user = True
        except KeyError:
            pass

        if delete_system_user:
            client = salt.client.LocalClient()
            rc = client.cmd('*', 'user.delete', [userid])
            for hostname, status in rc.items():
                if not status:
                    error_list.append(
                        "Error deleting the userid on GRIDCell %s" % hostname)
        if error_list:
            raise Exception(','.join(error_list))

        # Now delete from samba's database
        lines, err = command.get_command_output(r'pdbedit -d 1 -x %s' % userid)
        if err:
            raise Exception(err)

    except Exception, e:
        return False, 'Error deleting local user :%s' % str(e)
    else:
        return True, None


def change_password(userid, pswd):
    """Change the password for  a local user account in samba. 

    userid -- The username of the account
    pswd -- The password for the username
    """

    try:
        (ret, rc), err = command.execute_with_conf_and_rc(
            r'smbpasswd -s %s' % (userid), "%s\n%s" % (pswd, pswd))
        if rc == 0:
            lines, er = command.get_output_list(ret)
            if er:
                raise Exception(er)
        else:
            err = ''
            tl, er = command.get_output_list(ret)
            if er:
                raise Exception(er)
            if tl:
                err = ','.join(tl)
            tl, er = command.get_error_list(ret)
            if er:
                raise Exception(er)
            if tl:
                err = err + ','.join(tl)
            raise Exception(err)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error changing local users password :%s' % str(e)
    else:
        return True, None


def get_local_users():
    """Get the username, real name of all the local users in the system

    userid -- The username of the account
    pswd -- The password for the username
    """
    user_list = None
    try:
        ul, err = command.get_command_output("/usr/bin/pdbedit -d 1 -L")
        if err:
            raise Exception(err)

        user_list = []
        for u in ul:
            l = u.split(':')
            if l:
                d = {}
                d["userid"] = l[0]
                if len(l) > 1:
                    d["name"] = l[2]
                user_list.append(d)
    except Exception, e:
        return None, 'Error retrieving local user list :%s' % str(e)
    else:
        return user_list, None


def main():
    #change_password("bkrram", "ram1")
    delete_local_user("ram2")
    # print get_samba_users()


if __name__ == "__main__":
    main()


# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
