"""Routines that perform various gluster volume quota operations.

This exports:

  set_volume_dir_quota - Set a gluster volume directory or volume quota.
  remove_volume_dir_quota - Remove a gluster volume directory quota.
  change_quota_status - Change the status of a gluster volume directory quota.
  get_volume_quotas - Get all quotas for a gluster volume.

"""

from integralstor_gridcell import xml_parse


def set_volume_dir_quota(vol_name, dir, limit, unit):
    """Sets a directory or volume quota for a gluster volume. Setting the dir to '/' sets it for the whole volume.

    If the command runs without an error, it returns True, else False
    vol_name - the volume name
    dir - the directory for which the quota need to be set
    limit - a number specifying the quantity
    unit - GB/MB
    """

    try:
        cmd = 'gluster volume quota %s limit-usage %s %s%s --xml' % (
            vol_name, dir, limit, unit)
        d, err = xml_parse.run_gluster_command(cmd)
        if err:
            raise Exception
    except Exception, e:
        return False, 'Error setting volume quota : %s' % str(e)
    else:
        return True, None


def remove_volume_dir_quota(vol_name, dir):
    """Removes a directory quota for a gluster volume

    If the command runs without an error, it returns True, else False
    vol_name - the volume name
    dir - the directory for which the quota need to be set
    """

    try:
        cmd = 'gluster volume quota %s remove %s --xml' % (vol_name, dir)
        d, err = xml_parse.run_gluster_command(cmd)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error removing volume quota : %s' % str(e)
    else:
        return True, None


def change_quota_status(vol_name, action):
    """Enable/disable quotas for a gluster volume

    If the command runs without an error, it returns True, else False
    vol_name - the volume name
    action - Either 'enable' or 'disable'.
    """

    try:
        cmd = 'gluster --mode=script volume quota %s %s --xml' % (
            vol_name, action)
        d, err = xml_parse.run_gluster_command(cmd)
        if err:
            raise Exception(err)
        if action == 'enable':
            cmd = 'gluster volume set %s quota-deem-statfs on --xml' % vol_name
            d, err = xml_parse.run_gluster_command(cmd)
            if err:
                raise Exception(err)

    except Exception, e:
        return False, 'Error changing volume quota status : %s' % (str(e))
    else:
        return True, None


def get_volume_quotas(vol_name):
    """Get volume quotas for a volume

    If the command runs without an error, it returns a dict with the quota info, else False
    vol_name - the volume name
    """

    quotas = None
    try:
        cmd = 'gluster volume quota %s list --xml /' % (vol_name)
        d, err = xml_parse.run_gluster_command(cmd)
        if err:
            raise Exception(err)
        root = d["root"]
        quotas, err = xml_parse.get_vol_quotas(root)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error getting volume quota : %s' % str(e)
    else:
        return quotas, None

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
