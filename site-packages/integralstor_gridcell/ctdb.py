"""Routines that provide information and help configure CTDB

This exports:
  add_to_nodes_file - Used to add a set of IPs to the CTDB nodes file
  remove_from_nodes_file - Used to remove a set of IPs from the CTDB nodes file
  reload_nodes_file - Used to tell CTDB to reload its nodes file on all the nodes
  create_config_file - Used to create the basic CTDB configuration file
  get_status - Used to get the CTDB status of all the nodes

"""

import shutil
from integralstor_utils import config, command
import salt.client


def get_public_addresses():
    """
    Return IP addresses from CTDB public_addresses file in admin vol.

    Input:
      ['None']
    Output:
      [ip_list, 'None'] on successful execution
      ['None', 'Error string'] on failure/exception
    """

    ip_list = []
    iface = "bond0"
    try:
        config_dir, err = config.get_config_dir()
        if err:
            raise Exception(err)

        file_name = '%s/lock/public_addresses' % config_dir
        try:
            with open(file_name, 'r') as f:
                for line in f:
                    ip_list.append(line.strip())
            f.close()
        except Exception, e:
            # In case there is no file existing, go ahead
            pass

    except Exception, e:
        return False, "Error reading from CTDB public_addresses file : %s" % str(e)
    else:
        return ip_list, None


def mod_public_addresses(ip_list, action="add"):
    """
    Append a set of IP addresses to CTDB public_addresses in admin vol.

    Input:
      ip_list -- A list of IP addresses(with prefix length, i.e, in CIDR form)
      action -- add, remove, create
    Output:
      ['True', 'None'] on successful execution
      ['None', 'Error string'] on failure/exception
    """

    existing_ips = []
    iface = "bond0"
    try:
        if action != "create" and not ip_list:
            raise Exception(
                "No IPs provided to add to the CTDB public_addresses file!")

        config_dir, err = config.get_config_dir()
        if err:
            raise Exception(err)

        file_name = '%s/lock/public_addresses' % config_dir
        existing_ips, err = get_public_addresses()
        if err:
            raise Exception(err)

        if action not in ['add', 'remove', 'create']:
            raise Exception(
                "Unrecognized action: %s. [only 'add' & 'remove' permitted]")
        if action == "add":
            with open(file_name, 'a') as f:
                for ip in ip_list:
                    ip_iface = "%s %s" % (ip, iface)
                    if existing_ips:
                        if ip_iface not in existing_ips:
                            f.write("%s\n" % ip_iface)
                    else:
                        f.write("%s\n" % ip_iface)
            f.close()
        elif action == 'remove':
            with open(file_name, 'w') as f:
                for remov in ip_list:
                    remov_ip = "%s %s" % (remov, iface)
                    print remov_ip
                    print existing_ips
                    if existing_ips:
                        existing_ips.remove(remov_ip)
                if existing_ips:
                    for ip in existing_ips:
                        f.write("%s\n" % ip)
            f.close()
        elif action == 'create':
            with open(file_name, 'w') as f:
                pass
            f.close()
    except Exception, e:
        return False, "Error editing CTDB public_addresses file : %s" % str(e)
    else:
        return True, None


def add_to_nodes_file(ip_list):
    """
    Append a set of IP addresses to the CTDB nodes file in admin vol.

    ip_list -- A list of IP addresses to be appended
    """
    existing_ips = []
    try:
        if not ip_list:
            raise Exception("No IPs to add to the CTDB nodes file!")

        config_dir, err = config.get_config_dir()
        if err:
            raise Exception(err)

        try:
            with open('%s/lock/nodes' % config_dir, 'r') as f:
                for line in f:
                    existing_ips.append(line.strip())
        except Exception, e:
            # In case there is no file existing, go ahead
            pass

        with open('%s/lock/nodes' % config_dir, 'a') as f:
            for ip in ip_list:
                if existing_ips:
                    if ip.strip() not in existing_ips:
                        f.write("%s\n" % ip)
                else:
                    f.write("%s\n" % ip)

    except Exception, e:
        return False, "Error adding IPs to the CTDB Nodes file : %s" % str(e)
    else:
        return True, None


def remove_from_nodes_file(ip_list):
    """ Remove a (set of) IP addresses from the CTDB nodes file

    ip_list -- A list of IP addresses to be removed
    """

    try:
        config_dir, err = config.get_config_dir()
        if err:
            raise Exception(err)

        with open('/tmp/ctdb_nodes_file', 'w') as f1:
            with open('%s/lock/nodes' % config_dir, 'r') as f:
                for line in f:
                    if line.strip() in ip_list:
                        continue
                    else:
                        f1.write('%s\n' % line.strip())
        shutil.move('/tmp/ctdb_nodes_file', '%s/lock/nodes' % config_dir)

    except Exception, e:
        return False, "Error removing IPs from the CTDB Nodes file : %s" % str(e)
    else:
        return True, None


def reload_nodes_file(client, ignore_result_list):
    """ Tell CTDB on all the nodes to reload the nodes file

    client -- If the nodes file needs to be reloaded and if a salt client handle exists, then it is passed here to avoid recreation
    """

    try:
        if not client:
            client = salt.client.LocalClient()

        el = []
        r1 = client.cmd('*', 'cmd.run_all', ['ctdb reloadnodes'])
        if r1:
            for node, ret in r1.items():
                print ret
                if ret["retcode"] != 0:
                    if not ignore_result_list or node not in ignore_result_list:
                        el.append(node)
        if el:
            raise Exception('Error reload in nodes %s' % (','.join(el)))
    except Exception, e:
        return False, "Error reloading the CTDB Nodes file : %s" % str(e)
    else:
        return True, None


def create_config_file():
    """Create the CTDB configuration file pointing to the required files."""

    try:
        config_dir, err = config.get_config_dir()
        if err:
            raise Exception(err)
        with open("/etc/sysconfig/ctdb", "w") as f:
            f.write("CTDB_RECOVERY_LOCK=%s/lock/ctdb_rec_lockfile\n" %
                    config_dir)
            f.write("CTDB_NODES=/etc/ctdb/nodes\n")
            f.write("CTDB_PUBLIC_ADDRESSES=/etc/ctdb/public_addresses\n")
            f.write("CTDB_MANAGES_SAMBA=yes\n")
            f.write("CTDB_MANAGES_WINBIND=yes\n")
            f.write("CTDB_SAMBA_SKIP_SHARE_CHECK=yes\n")
            f.write("CTDB_DEBUGLEVEL=NOTICE\n")
            f.write("CTDB_SET_RecoveryBanPeriod=150\n")
            f.close()
    except Exception, e:
        return False, "Error creating ctdb config file : %s" % str(e)
    else:
        return True, None


def get_status():
    """Return the CTDB status as a dict with the node name as the key and the status as the value."""
    status_dict = {}
    try:
        lines, err = command.get_command_output('ctdb -Y status')
        if err:
            raise Exception(err)
        i = 0
        for line in lines:
            if i == 0:
                i += 1
                continue
            # print line
            components = line.split(':')
            # print components
            ok = True
            status = ''
            if components:
                if components[3] != '0':
                    status += '| Banned |'
                    ok = False
                if components[4] != '0':
                    status += '| Disabled |'
                    ok = False
                if components[5] != '0':
                    status += '| Unhealthy |'
                    ok = False
                if components[6] != '0':
                    status += '| Stopped |'
                    ok = False
                if components[7] != '0':
                    status += '| Inactive |'
                    ok = False
                if components[8] != '0':
                    status += '| PartiallyOnline |'
                    ok = False
                if ok:
                    status += 'OK'
                status_dict[components[2]] = status
            i += 1
    except Exception, e:
        return None, "Error retrieving CTDB status: %s" % str(e)
    else:
        return status_dict, None


def main():
    pass
    # print mod_public_addresses (["192.168.5.1/24", "1.1.1.1/24"], action = "add")
    # print mod_public_addresses (["5.5.5.5/24", "1.1.1.1/24"], action = "add")
    # print mod_public_addresses (["1.1.1.1/24", "192.168.5.1/24"], action = "remove")
    # print mod_public_addresses (None, action = "create")
    print get_public_addresses()
    # print get_status()


if __name__ == '__main__':
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
