"""Operations pertaining to DNS operations

This exports:
  add_to_dns - Adds the specified host/ip combo to dns.
  remove_from_dns - Removes the specified host/ip combo from dns.
"""

#Controls whether to use the hosts file or named. Valid strings are 'hosts' or 'named'
dns_mode = 'named' 

def add_to_dns(client, hn, ip):
  """Adds a hostname/IP combination to the name services.

  client - salt's client handle.
  hn - the hostname to add.
  ip - the IP address for the hostname.
  """

  try:
    no_op = False
    if dns_mode == 'named':
      # Dont add the primary and secondary because they are already there as part of the initial setup!
      if hn in ['gridcell-pri.integralstor.lan', 'gridcell-sec.integralstor.lan', 'gridcell-pri', 'gridcell-sec']:
        no_op = True
        pass
      r1 = client.cmd('roles:primary', 'ddns.add_host', ['integralstor.lan', hn, 86400, ip], expr_form='grain', timeout=180)
    else:
      r1 = client.cmd('*', 'hosts.add_host', [ip, '%s.integralstor.lan'%hn])
    if not no_op:
      #print r1
      #print "Added %s to DNS"%hn
      if not r1:
        raise Exception("GRIDCell %s"%hn)
      else:
        for key, value in r1.items():
          if value is not None and value==False:
            raise Exception("GRIDCell %s"%hn)
  except Exception, e:
    return False, "Error adding a GRIDCell to DNS : %s"%str(e)
  else:
    return True, None

def remove_from_dns(client, hn):
  """Removes a hostname/IP combination from the name services.

  client - salt's client handle.
  hn - the hostname to remove.
  """
  try:
    # Dont remove the primary and secondary because they are always needed.
    if hn in ['gridcell-pri.integralstor.lan', 'gridcell-sec.integralstor.lan', 'gridcell-pri', 'gridcell-sec']:
      raise Exception('Cannot remove the primary or secondary GRIDCells from DNS.')

    if dns_mode == 'named':
      r1 = client.cmd('roles:primary', 'ddns.delete_host', ['integralstor.lan', hn], expr_form='grain', timeout=180)
      if not r1:
        raise Exception("GRIDCell %s"%hn)
    else:
      ip = None
      r1 = client.cmd('*', 'hosts.get_ip', ['%s.integralstor.lan'%hn])
      if not r1:
        raise Exception("GRIDCell %s"%hn)
      else:
        for key, value in r1.items():
          if not value :
            raise Exception("GRIDCell %s"%hn)
      if not r1:
        raise Exception("Error determining IP of GRIDCell %s"%hn)
      for key, value in r1.items():
        if value and value != '127.0.0.1':
          ip = value
          break
      if ip:
        r1 = client.cmd('*', 'hosts.rm_host', [ip, '%s.integralstor.lan'%hn])
        err_list = []
        for key, value in r1.items():
          if value is not None and value==False:
            err_list.append('Error removing hostname entry "%s" from GRIDCell %s'%(hn, key))
        if err_list:
          raise Exception('The following errors occurred : %s. Please resynchronize the hosts file'%'.'.join(err_list))
      else:
        raise Exception('Error determining IP for hostname %s'%hn)

  except Exception, e:
     return False, "Error removing DNS information for GRIDCell : %s"%str(e)
  else:
    return True, None

import salt.client
client = salt.client.LocalClient()
print add_to_dns(client, 'blah', '192.168.1.59')
print remove_from_dns(client, 'blah')
