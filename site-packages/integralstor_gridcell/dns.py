"""Operations pertaining to DNS operations

This exports:
  add_to_dns - Adds the specified host/ip combo to dns.
  remove_from_dns - Removes the specified host/ip combo from dns.
"""
import salt.client
from integralstor_common import common

#Controls whether to use the hosts file or named. Valid strings are 'hosts' or 'named'
dns_mode = 'hosts' 

def add_to_dns(client, hn, ip):
  """Adds a hostname/IP combination to the name services.

  client - salt's client handle.
  hn - the hostname to add.
  ip - the IP address for the hostname.
  """

  try:
    no_op = False
    if dns_mode == 'named':
      # Dont add the primary and secondary because they are already there as part of the initial setup!
      if hn in ['gridcell-pri.integralstor.lan', 'gridcell-sec.integralstor.lan', 'gridcell-pri', 'gridcell-sec']:
        no_op = True
        pass
      r1 = client.cmd('roles:primary', 'ddns.add_host', ['integralstor.lan', hn, 86400, ip], expr_form='grain', timeout=180)
    else:
      if 'integralstor.lan' not in hn:
        r1 = client.cmd('*', 'hosts.add_host', [ip, '%s.integralstor.lan'%hn])
      else:
        r1 = client.cmd('*', 'hosts.add_host', [ip, hn])
    if not no_op:
      #print r1
      #print "Added %s to DNS"%hn
      if not r1:
        raise Exception("GRIDCell %s"%hn)
      else:
        for key, value in r1.items():
          if value is not None and value==False:
            raise Exception("GRIDCell %s"%hn)
  except Exception, e:
    return False, "Error adding a GRIDCell to DNS : %s"%str(e)
  else:
    return True, None

def remove_from_dns(client, hn):
  """Removes a hostname/IP combination from the name services.

  client - salt's client handle.
  hn - the hostname to remove.
  """
  try:
    # Dont remove the primary and secondary because they are always needed.
    if hn in ['gridcell-pri.integralstor.lan', 'gridcell-sec.integralstor.lan', 'gridcell-pri', 'gridcell-sec']:
      raise Exception('Cannot remove the primary or secondary GRIDCells from DNS.')

    if dns_mode == 'named':
      r1 = client.cmd('roles:primary', 'ddns.delete_host', ['integralstor.lan', hn], expr_form='grain', timeout=180)
      if not r1:
        raise Exception("GRIDCell %s"%hn)
    else:
      ip = None
      r1 = client.cmd('*', 'hosts.get_ip', ['%s.integralstor.lan'%hn])
      if not r1:
        raise Exception("GRIDCell %s"%hn)
      else:
        for key, value in r1.items():
          if not value :
            raise Exception("GRIDCell %s"%hn)
      if not r1:
        raise Exception("Error determining IP of GRIDCell %s"%hn)
      for key, value in r1.items():
        if value and value != '127.0.0.1':
          ip = value
          break
      if ip:
        r1 = client.cmd('*', 'hosts.rm_host', [ip, '%s.integralstor.lan'%hn])
        err_list = []
        for key, value in r1.items():
          if value is not None and value==False:
            err_list.append('Error removing hostname entry "%s" from GRIDCell %s'%(hn, key))
        if err_list:
          raise Exception('The following errors occurred : %s. Please resynchronize the hosts file'%'.'.join(err_list))
      else:
        raise Exception('Error determining IP for hostname %s'%hn)

  except Exception, e:
     return False, "Error removing DNS information for GRIDCell : %s"%str(e)
  else:
    return True, None

def check_hosts_file_entries(client = None):
  try:
    if not client:
      client = salt.client.LocalClient()

    config_dir, err = common.get_config_dir()
    if err:
      raise Exception(err)

    with open('%s/master_hosts_file'%config_dir, 'r') as f:
      master_lines = f.readlines()

    current_entries = client.cmd('*', 'hosts.list_hosts')

    if not current_entries:
      raise Exception('Error retrieving current host entries')

    errors = []
    for host, entries in current_entries.items():
      current_ips = entries.keys()
      for line in master_lines:
        components = line.strip().split()
        ip = components[0].strip()
        hn = components[1].strip()
        if len(components) != 2:
          raise Exception('Incorrect master hosts entry : %s'%line)
        if ip not in current_ips:
          errors.append('The IP address %s is not present in GRIDCell %s'%(ip, host))
        elif hn not in entries[ip]:
          errors.append('The hostname %s for IP address %s is not present in GRIDCell %s. The erroneous hosts are "%s"'%(hn, ip, host, ','.join(entries[ip])))
    if not errors:
      print 'all ok'
    else:
      print errors
      
        
  except Exception, e:
     return False, "Error checking hosts file entries : %s"%str(e)
  else:
    return True, None

def get_known_hosts():
  """Gets the list of hosts with non-loopback IP addresses from the hosts file along with their IP addresses"""
  hosts = {}
  try:
    with open('/etc/hosts', 'r') as f:
      lines = f.readlines()
    if lines:
      for line in lines:
        components = line.strip().split()
        if components[0].strip() == '127.0.0.1':
          continue
        if components and len(components) >= 2:
          for hn in components[1:]:
            if 'integralstor.lan' in hn:            
              hosts[components[0]] = hn.strip()
  except Exception, e:
    return None, 'Error retrieving known hosts from hosts file : %s'%str(e)
  else:
    return hosts, None

#import salt.client
#client = salt.client.LocalClient()
#print add_to_dns(client, 'blah', '192.168.1.59')
#print remove_from_dns(client, 'blah')
#print check_hosts_file_entries()
#print get_known_hosts()
